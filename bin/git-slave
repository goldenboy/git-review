#! /usr/bin/env python

# No Copyright (-) 2010 The Ampify Authors. This file is under the
# Public Domain license that can be found in the root LICENSE file.

"""A git-command to support slave builds from a git review server."""

import atexit
import pylibs
import os
import sys

from hashlib import sha1
from optparse import OptionParser
from os import chdir
from os.path import isdir, isfile, join, realpath
from shutil import rmtree
from time import ctime, sleep, time
from traceback import print_exc
from urllib import urlencode, urlopen

from daemon import Daemon
from optcomplete import ListCompleter, autocomplete
from pyutil.exception import format_exception
from pyutil.scm import is_git, SCMConfig
from pyutil.env import run_command
from simplejson import dumps as encode_json
from yaml import safe_load as decode_yaml

# ------------------------------------------------------------------------------
# Daemon
# ------------------------------------------------------------------------------

class Slave(Daemon):

    debug = False
    log_file = None
    sleep_factor = 0

    def set_values(
        self, repo_id, root, config_path, server, slave_id, slave_token, uname
        ):
        self.repo_id = repo_id
        self.root = root
        self.config_path = config_path
        self.server = server
        self.slave_id = slave_id
        self.slave_token = slave_token
        self.uname = uname
        self.build_url = server + '/build'

    def log(self, msg):
        if self.debug:
            print msg

    def error(self):
        log_file = self.log_file
        if log_file:
            log_file.write('# ERROR: ' + ctime() + '\n\n')
            print_exc(file=log_file)
            log_file.write('\n')
            log_file.flush()
        else:
            print
            print_exc()
            print

    def git(self, *args, **kwargs):
        args = ['git'] + list(args)
        if self.debug:
            kwargs['reterror'] = True
            kwargs['log'] = True
            if 'retcode' in kwargs:
                stdout, stderr, error = run_command(args, **kwargs)
            else:
                stdout, stderr = run_command(args, **kwargs)
            if stdout:
                self.log(stdout)
            if stderr:
                self.log(stderr)
            if 'retcode' in kwargs:
                return stdout, error
            return stdout
        return run_command(args, **kwargs)

    def run(self):
        revision = None
        new_build_url = self.get_new_build_url()
        chdir(self.root)
        while 1:
            if self.debug:
                self.log("=> Checking for things to do")
            try:
                server = urlopen(new_build_url)
                response = server.read()
                server.close()
                if response.startswith('OK '):
                    revision = response[3:]
                else:
                    raise ValueError(response)
            except Exception:
                revision = None
                self.sleep_more(2)
                self.error()
            if revision:
                results = {}
                try:
                    self.setup_repo(revision)
                    self.execute_build(results)
                except Exception:
                    tb = '<br />'.join(format_exception())
                    if self.debug:
                        self.log("=> Error running build:")
                    self.error()
                    results = {'traceback': tb}
                try:
                    self.send_results(revision, results)
                except Exception:
                    if self.debug:
                        self.log("=> Error sending results:")
                    self.error()
                    revision = None
            if not revision:
                duration = 1.6 * (1.79 ** self.sleep_factor)
                if self.debug:
                    self.log("=> Sleeping for %.1f seconds" % duration)
                sleep(duration)
                self.sleep_more()

    def get_new_build_url(self):
        return (
            self.server + '/job?' +
            urlencode(dict(
                uname=self.uname, repo=self.repo_id, slave_id=self.slave_id,
                token=self.slave_token
                ))
            )

    def setup_repo(self, revision):
        if self.debug:
            self.log("=> Fetching remote updates")
        self.git('remote', 'update', '--prune')
        _, retcode = self.git('checkout', revision, retcode=True)
        if not retcode:
            _, retcode = self.git('submodule', 'update', '--init', retcode=True)
        if retcode:
            self.log("=> Attempting to go back to a virgin state")
            self.git('clean', '-fdx')
            self.git('reset', '--hard')
            for path in self.git('status', '--porcelain').splitlines():
                if path.startswith('??'):
                    path = path.split('??', 1)[1].strip()
                    if isdir(path):
                        rmtree(path)
            self.git('submodule', 'foreach', 'git clean -fdx')
            self.git('submodule', 'sync')
            self.git('checkout', revision)
            self.git('submodule', 'update', '--init')

    def execute_build(self, results):
        commands = self.get_build_commands()
        executed = results['executed'] = []
        for spec in commands:
            name = spec[0]
            command = spec[1:]
            if not command:
                continue
            if self.debug:
                self.log("=> Executing command: %r" % command)
            start = time()
            stdout, stderr, error = run_command(
                command, retcode=True, reterror=True
                )
            duration = time() - start
            results[name + '|time'] = int(duration * 1000)
            if error:
                results[name + '|stdout'] = stdout
                if stderr:
                    results[name + '|stderr'] = stderr
            executed.append(name)
        self.sleep_factor = 0

    def get_build_commands(self):
        if not isfile(self.config_path):
            raise RuntimeError("ERROR: Couldn't find %s" % self.config_path)
        config_file = open(self.config_path, 'rb')
        config = decode_yaml(config_file.read())
        config_file.close()
        return config['slave']

    def send_results(self, revision, results):
        response = {
            'data': encode_json(results),
            'revision': revision,
            'repo': self.repo_id,
            'slave_id': self.slave_id,
            'token': self.slave_token,
            'uname': self.uname
            }
        server = urlopen(self.build_url, urlencode(response))
        server_response = server.read()
        if not server_response.startswith('OK '):
            self.sleep_more(2)
        server.close()

    def sleep_more(self, n=1):
        self.sleep_factor = min(self.sleep_factor + n, 5)

# ------------------------------------------------------------------------------
# Main Runner
# ------------------------------------------------------------------------------

def main():

    argv = sys.argv[1:]

    op = OptionParser(usage=(
        "Usage: git slave [command]\n\n"
        "Commands:\n"
        "   run       run the slave in the foreground\n"
        "   start     start the slave daemon\n"
        "   stop      stop the slave daemon\n"
        "   restart   restart the slave daemon"
        ))

    op.add_option('-s', dest='server', default="",
                  help="override the http server url in the repo config")

    commands = ['start', 'stop', 'restart', 'run', 'help']
    autocomplete(op, ListCompleter(commands))

    options, args = op.parse_args(argv)
    if not args:
        op.print_help()
        sys.exit()

    command = args[0]

    if command == 'help':
        op.print_help()
        sys.exit()
    elif command not in commands:
        op.print_help()
        sys.exit(1)

    if not is_git():
        print "ERROR: Not inside a git repository."
        sys.exit(1)

    # if run_command(['git', 'status', '--porcelain']):
    #     print "ERROR: This is not a fresh git repository clone."
    #     print "ERROR: Please commit your changes and untracked files."
    #     sys.exit(1)

    git = SCMConfig('git')
    root = realpath(git.root)

    config_path = join(root, '.gitreview', 'config.yaml')
    if not isfile(config_path):
        print "ERROR: Couldn't find %s" % config_path
        sys.exit(1)

    config_file = open(config_path, 'rb')
    config = decode_yaml(config_file.read())
    config_file.close()

    review_server = options.server
    if not review_server:
        review_server = config['review_server']

    slave_id = git.get('slave.id')
    token = git.get('slave.token')

    if not slave_id:
        print "ERROR: You need to set the Slave ID, e.g."
        print
        print "    git config slave.id 42"
        print

    if not token:
        print "ERROR: You need to set the Slave Token, e.g."
        print
        print "    git config slave.token 86f7e437faa5a7fce15d1ddcb9eaeae4"
        print

    if not (slave_id and token):
        print "You can get a Slave ID and Token from:"
        print
        print "    %s/slaves" % review_server
        print
        sys.exit(1)

    if os.name == 'posix':
        uname = run_command(['uname', '-mrs'])
        if not len(uname.split()) == 3:
            print "ERROR: Couldn't detect the platform accurately."
            print "ERROR: Please file a bug report -- %r" % uname
            sys.exit(1)
    else:
        print "ERROR: Sorry, the %s platform isn't supported yet." % os.name
        sys.exit(1)

    repo_id = config['repo_id']
    var_prefix = '/tmp/git-slave-%s-%s'  % (repo_id, sha1(root).hexdigest()[:8])

    slave = Slave('%s.pid' % var_prefix)
    slave.set_values(
        repo_id, root, config_path, review_server, slave_id, token, uname
        )

    if command == 'run':
        slave.debug = True
        slave.run()
        return
    elif command == 'stop':
        slave.stop()
        return

    slave.log_file = open('%s.log' % var_prefix, 'wb')
    atexit.register(lambda: slave.log_file.close())

    if command == 'start':
        slave.start()
    elif command == 'restart':
        slave.restart()

# ------------------------------------------------------------------------------
# Self Runner
# ------------------------------------------------------------------------------

if __name__ == '__main__':
    main()
