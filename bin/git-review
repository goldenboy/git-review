#! /usr/bin/env python

# No Copyright (-) 2010 The Ampify Authors. This file is under the
# Public Domain license that can be found in the root LICENSE file.

"""A git-command to support git reviews."""

import pylibs
import sys

from fnmatch import fnmatch
from optparse import OptionParser
from os import chdir, environ, fdopen, remove, walk
from os.path import join, realpath
from re import compile as compile_regex, MULTILINE
from tempfile import mkstemp
from time import time
from traceback import print_exc
from urllib import urlencode, urlopen

from optcomplete import autocomplete, ListCompleter
from optcomplete import make_autocompleter, parse_options
from pyutil.env import exit, run_command
from pyutil.scm import is_git, SCMConfig
from simplejson import dumps as encode_json
from yaml import safe_load as decode_yaml

# ------------------------------------------------------------------------------
# Settings
# ------------------------------------------------------------------------------

CONFIG = {}

REVIEW_MESSAGE = """

# Please enter a message for your review submission. All
# lines starting with '#' will be ignored, and an empty
# message aborts the submission.
#
# A default message has been generated from the various
# commit messages involved in this submission.
"""

# ------------------------------------------------------------------------------
# Utility Functions
# ------------------------------------------------------------------------------

def git(*args, **kwargs):
    if 'exit_on_error' not in kwargs:
        kwargs['exit_on_error'] = True
    if kwargs.pop('out', None):
        kwargs['redirect_stdout'] = False
        kwargs['redirect_stderr'] = False
        kwargs['retcode'] = True
    return run_command(['git'] + list(args), **kwargs)

def git_rebase(revision):
    _, retcode = run_command(
        ['git', 'rebase', '-i', revision],
        redirect_stderr=False, redirect_stdout=False, retcode=True
        )
    if retcode:
        sys.exit(retcode)

def setup_remote(name):
    if not git('config', 'remote.%s.url' % name, exit_on_error=False):
        url = CONFIG['%s_repo' % name]
        print "=> Setting the %r remote: %s" % (name, url)
        git('remote', 'add', name, url)

def update_remote(name):
    sys.stdout.write("=> ")
    sys.stdout.flush()
    git('remote', 'update', name, '--prune', out=True)

def parse_config(root):
    config_path = join(root, '.gitreview', 'config.yaml')
    config_file = open(config_path)
    config_data = config_file.read()
    config_file.close()
    config = decode_yaml(config_data)
    if config:
        CONFIG.update(config)

def get_watchers(diff, root):
    watchlist_path = join(root, '.gitreview', 'watchlist.yaml')
    watchlist_file = open(watchlist_path)
    watchlist_data = watchlist_file.read()
    watchlist_file.close()
    watchlist_spec = decode_yaml(watchlist_data)
    pathsets = watchlist_spec['pathsets']
    matches = {}
    for pathset in pathsets:
        matches[pathset] = set()
    for i in range(0, len(diff), 2):
        path = diff[i+1]
        for pathset in pathsets:
            match = matches[pathset]
            for pattern in pathsets[pathset]:
                if fnmatch(path, pattern):
                    match.add(path)
    watchlists = watchlist_spec['watchlists']
    watchers = set()
    for pathset in matches:
        if matches[pathset] and pathset in watchlists:
            watchers.update(watchlists[pathset])
    return watchers

def exit_if_dirty():
    if git('diff-index', 'HEAD'):
        print "ERROR: You have a dirty tree."
        print "ERROR: Please stash your changes or commit them locally first."
        sys.exit(1)

def get_review_ids():
    return [
        branch[10:]
        for branch in [b.strip() for b in git('branch', '-r').splitlines()]
        if branch.startswith('gitreview/') and branch.count('/') == 3
        ]

def get_ref_list(root):
    refs = ['HEAD', 'FETCH_HEAD', 'ORIG_HEAD']
    append = refs.append
    for path in ['heads', 'remotes', 'tags']:
        path = join(root, '.git', 'refs', path)
        for dirpath, _, filenames in walk(path):
            if filenames:
                prefix = dirpath.replace(path, '', 1)
                for filename in filenames:
                    ref = "%s/%s" % (prefix, filename)
                    if ref.startswith('/'):
                        ref = ref[1:]
                    append(ref)
    return refs

def get_current_branch():
    branch = git('symbolic-ref', 'HEAD', '-q', exit_on_error=False)
    if branch and branch.startswith('refs/heads/'):
        return branch.replace('refs/heads/', '', 1).strip()
    print "ERROR: Couldn't detect the current git branch."
    sys.exit(1)

def get_git_info():

    git = SCMConfig('git')
    login = git.get('github.user')
    token = git.get('github.token')

    if not login:
        print "ERROR: You need to set your GitHub username, e.g."
        print
        print "    git config --global github.user tav"
        print

    if not token:
        print "ERROR: You need to set your GitHub API token, e.g."
        print
        print "    git config --global github.token 86f7e437faa5a7fce15d1ddcb9eaeae4"
        print
        print "You can find your API Token in the Account Admin section at:"
        print
        print "    https://github.com/account"
        print

    if not (login and token):
        sys.exit(1)

    return login, token, git.root

def valid_review_id(id, valid=set('abcdefghijklmnopqrstuvwxyz0123456789-_')):
    if id.startswith('-') or id.startswith('_'):
        return
    for char in id:
        if char not in valid:
            return
    return id

replace_comments = compile_regex(r'^#.*$', MULTILINE).sub

def editor(text=REVIEW_MESSAGE):
    fd, filename = mkstemp()
    tempfile = fdopen(fd, 'wb')
    tempfile.write(text)
    tempfile.close()
    _, retcode = run_command(
        [environ.get('EDITOR', 'vi'), filename], retcode=True,
        redirect_stdout=False, redirect_stderr=False
        )
    if retcode:
        return
    tempfile = open(filename, 'rb')
    text = tempfile.read()
    tempfile.close()
    remove(filename)
    return replace_comments('', text).strip()

# ------------------------------------------------------------------------------
# Review Changelist and Checkers
# ------------------------------------------------------------------------------

BINARY_FILES = ['*.gif', '*.ico', '*.jpeg', '*.jpg', '*.png']

class Changelist(object):

    def __init__(self):
        self.deleted = []
        self.added = []
        self.modified = []
        self.changes = {}
        self.errors = []
        self.template = ''

    def error(self, title, description=''):
        title = self.template % title
        self.errors.append((title, description))

def create_changelist(diff):
    changelist = Changelist()
    changes = changelist.changes
    for i in range(0, len(diff), 2):
        action, path = diff[i], diff[i+1]
        if action == 'A':
            changelist.added.append(path)
        elif action == 'M':
            changelist.modified.append(path)
        elif action == 'D':
            changelist.deleted.append(path)
        if action not in changes:
            changes[action] = []
        changes[action].append(path)
    return changelist

checker_prefix_path = ''

def run_review_checks(diff, root):

    changelist = create_changelist(diff)
    if not changelist.changes:
        print "=> No changes found -- exiting."
        sys.exit()

    chdir(root)

    hooks = git('ls-files', '*revhook').strip().splitlines()
    if not hooks:
        print "=> No review hooks found -- exiting."
        sys.exit()

    print "=> Loading review hooks."

    global checker_prefix_path

    for path in hooks:
        checker_prefix_path = path.rsplit('revhook', 1)[0]
        builtins = {
            'BINARY_FILES': BINARY_FILES, 'run': run, 'checker': checker,
            'realpath': realpath, 'run_command': run_command
            }
        try:
            execfile(path, builtins)
        except Exception:
            print
            print_exc()
            print
            print "ERROR: Exception raised when loading %s" % realpath(path)
            sys.exit(1)

    print "=> Running review checks."
    added_and_modified = changelist.added + changelist.modified

    for checker_func, include, exclude, prefix in CHECKERS:
        changelist.template = checker_func.__doc__ or "%s"
        files = []
        for file in added_and_modified:
            for pattern in include:
                if fnmatch(file, prefix + pattern) and file not in files:
                    files.append(file)
        for file in files[:]:
            for pattern in exclude:
                if fnmatch(file, prefix + pattern):
                    files.remove(file)
        try:
            checker_func(changelist, files)
        except Exception:
            print
            print_exc()
            print
            print (
                "ERROR: Exception raised when running the %s checker."
                % checker_func.__name__
                )
            sys.exit(1)

    errors = changelist.errors
    if errors:
        for lead, text in errors:
            print
            print "# %s%s" % (lead, text)
        print
        print "ERROR: Found %s errors running the review checks." % len(errors)
        sys.exit(1)

    print "=> Review checks passed."

CHECKERS = []

def checker(include=['*'], exclude=[]):
    def wrapper(func):
        CHECKERS.append((func, include, exclude, checker_prefix_path))
        return func
    return wrapper

def run(*args, **kwargs):
    for kw in ['retcode', 'reterror']:
        kwargs[kw] = True
    for kw in ['redirect_stderr', 'redirect_stdout']:
        kwargs[kw] = True
    stdout, stderr, retcode = run_command(args, **kwargs)
    return stdout.strip(), stderr.strip(), retcode

# ------------------------------------------------------------------------------
# Main Runner
# ------------------------------------------------------------------------------

def main(argv=None, show_help=False):

    argv = argv or sys.argv[1:]

    sys.argv[0] = 'git review'
    version = '0.1'

    usage = ("""Usage: git review <command> [options]
    \nCommands:
    \n%s
    version  show the version number and exit
    \nIf no commands are given, `git review check` is run.
    \nSee `git review help <command>` for more info on a specific command.""" %
    '\n'.join("    %-8s %s" % (cmd, COMMANDS[cmd].help) for cmd in sorted(COMMANDS))
    )

    autocomplete(
        OptionParser(add_help_option=False),
        ListCompleter(AUTOCOMPLETE_COMMANDS.keys()),
        subcommands=AUTOCOMPLETE_COMMANDS
        )

    if not argv:
        command = 'check'
    else:
        command = argv[0]
        argv = argv[1:]
        if command in ['-h', '--help']:
            show_help = True
        elif command == 'help':
            if argv:
                command = argv[0]
                argv = ['--help']
            else:
                show_help = True
        if command in ['-v', '--version', 'version']:
            print('git-review %s' % version)
            sys.exit()

    if show_help:
        print(usage)
        sys.exit(1)

    if not is_git():
        print "ERROR: Not inside a git repository."
        sys.exit()

    if command in COMMANDS:
        return COMMANDS[command](argv)

    exit("ERROR: Unknown git review command %r" % command)

# ------------------------------------------------------------------------------
# Apply Command
# ------------------------------------------------------------------------------

def apply(argv=None, completer=None):

    op = OptionParser(
        usage="Usage: git review apply <review-id> [options]",
        add_help_option=False
        )

    op.add_option('--official', action='store_true',
                  help="inform the review server of the review apply")

    op.add_option('-s', dest='server', default="",
                  help="override the http server url in the repo config")

    review_ids = get_review_ids()
    if completer:
        return op, ListCompleter(review_ids)

    login, token, root = get_git_info()
    parse_config(root)
    options, args = parse_options(op, argv, completer, True)

    if options.official:
        print "=> Informing review-server of the change."
        review_server = options.server
        if not review_server:
            review_server = CONFIG['review_server']
        server = urlopen(review_server + '/comment', urlencode({
            'review_id': args[0],
            'login': login,
            'token': token,
            'repo': CONFIG['repo_id'],
            'action': 'applied'
            }))
        server.read()
        server.close()
        return

    chdir(root)
    current_branch = get_current_branch()
    if current_branch == '(no branch)':
        print "ERROR: You need to be on a git branch -- ideally 'master'."
        sys.exit(1)

    # exit_if_dirty()
    setup_remote('gitreview'); update_remote('gitreview')
    setup_remote('upstream'); update_remote('upstream')

    review_ids = get_review_ids()
    id = args[0]
    if id not in review_ids:
        print "ERROR: Could not find the %r review" % id
        sys.exit(1)

    gitreview_id = 'gitreview/' + id
    upstream_master = 'upstream/' + CONFIG['default_branch']
    upstream_revision = git('rev-parse', upstream_master).strip()
    review_revision = git('rev-parse', gitreview_id).strip()
    HEAD = git('rev-parse', 'HEAD').strip()

    base_revision = git('merge-base', HEAD, review_revision).strip()
    if base_revision == review_revision:
        print "=> Nothing to apply -- %r has already been merged." % id
        sys.exit()

    base_revision = git('merge-base', HEAD, upstream_revision).strip()
    if base_revision != upstream_revision:
        print (
            "=> Creating temporary branch to rebase %s changes."
            % upstream_master
            )
        tmp_branch = 'tmp-%s-%x' % (id.split('/')[1], time())
        git('checkout', '-b', tmp_branch, gitreview_id, out=True)
        print "=> Rebasing %s changes." % upstream_master
        git_rebase(upstream_master)
        print "=> Switching back to the initial branch."
        git('checkout', current_branch, out=True)
        print "=> Merging the review changeset."
        git('merge', tmp_branch, out=True)
        print "=> Removing the temporary branch."
        git('branch', '-D', tmp_branch)
    else:
        print "=> Merging the review changeset."
        git('merge', gitreview_id, out=True)

    print "=> Review changeset %r successfully applied!" % id

# ------------------------------------------------------------------------------
# Check Command
# ------------------------------------------------------------------------------

def check(argv=None, completer=None):

    op = OptionParser(
        usage="Usage: git review check [<base-revision>]", add_help_option=False
        )

    root = realpath(git('rev-parse', '--show-cdup').strip())

    if completer:
        return op, ListCompleter(get_ref_list(root))

    options, args = parse_options(op, argv, completer, False)

    diff = git(
        'diff', args and args[0] or 'HEAD', '--name-status', '--cached', '-z',
        exit_on_error=True
        ).strip().split('\x00')[:-1]

    run_review_checks(diff, root)

# ------------------------------------------------------------------------------
# Submit Command
# ------------------------------------------------------------------------------

def submit(argv=None, completer=None):

    op = OptionParser(
        usage="Usage: git review submit [<branch>] [options]",
        add_help_option=False
        )

    op.add_option('-m', dest='msg', default="",
                  help="use the message as the title for the review item")

    op.add_option('-s', dest='server', default="",
                  help="override the http server url in the repo config")

    op.add_option('--cc', action='append', dest='reviewer',
                  help="the email address for an additional reviewer")

    op.add_option('--skip-checks', action='store_true', dest='skip_checks',
                  help="skip the automatic git review checks")

    options, args = parse_options(op, argv, completer, False)

    # exit_if_dirty()
    login, token, root = get_git_info()

    current_branch = get_current_branch()
    if args:
        review_branch = args[0]
    else:
        review_branch = current_branch

    if not valid_review_id(review_branch):
        print "ERROR: Invalid review branch name %r" % review_branch
        sys.exit(1)

    if review_branch != current_branch:
        git('checkout', '-q', review_branch, out=True)

    if review_branch == 'master':
        print "ERROR: You can't submit a master branch for review."
        sys.exit(1)

    parse_config(root)
    chdir(root)
    setup_remote('upstream')
    update_remote('upstream')

    HEAD = git('rev-parse', 'HEAD').strip()

    upstream_master = 'upstream/%s' % CONFIG['default_branch']
    upstream_revision = git('rev-parse', upstream_master).strip()

    base_revision = git('merge-base', HEAD, upstream_revision).strip()
    if base_revision == HEAD:
        print "ERROR: All the changes have already been merged upstream."
        print "ERROR: There is nothing to submit."
        sys.exit()

    for branch in git('branch', '--contains', upstream_revision):
        if branch.startswith('*'):
            rebase = False
            break
    else:
        rebase = True

    if rebase:
        print
        print "The %s has changed. You need to rebase." % upstream_master
        print
        response = raw_input("Hit enter to run `git rebase -i` [Y/n] ")
        if response.startswith('n'):
            sys.exit(1)
        print
        git_rebase(upstream_revision)
        print
        HEAD = git('rev-parse', 'HEAD').strip()

    diff = git(
        'diff', upstream_revision, '--name-status', '-z',
        exit_on_error=True
        ).strip().split('\x00')[:-1]

    if not options.skip_checks:
        run_review_checks(diff, root)

    if CONFIG['watchlist']:
        default_reviewers = CONFIG.get('cc', None)
        if default_reviewers:
            if not isinstance(default_reviewers, list):
                default_reviewers = [default_reviewers]
        reviewers = get_watchers(diff, root)
        reviewers.update(default_reviewers)
        reviewers = list(reviewers)
        reviewers = encode_json(reviewers)
    else:
        reviewers = ''

    print "=> Generating patch."
    patch = git('format-patch', upstream_revision, '--stdout')

    if not patch.strip():
        print "ERROR: Generated patch is empty. Nothing to send!"
        sys.exit(1)

    message = options.msg
    if not message:
        log = git('log', '--pretty=email', '-z', '%s...' % upstream_revision)
        log = [
            item.split('Subject: [PATCH] ', 1)[1].strip()
            for item in log.split('\x00')
            ]
        message = editor('\n\n'.join(log) + REVIEW_MESSAGE)
        if not message:
            print "ERROR: No message provided. Exiting submission."
            sys.exit(1)

    print "=> Sending patch to the review-server."
    review_server = options.server
    if not review_server:
        review_server = CONFIG['review_server']

    server = urlopen(review_server + '/reviews', urlencode({
        'name': review_branch,
        'revision': HEAD,
        'patch': patch,
        'login': login,
        'token': token,
        'message': message,
        'cc': reviewers,
        'repo': CONFIG['repo_id'],
        'upstream': upstream_revision
        }))

    path = server.read()
    server.close()

    if path.startswith('OK '):
        path = path.split('OK ', 1)[1].strip()
        print "=> You can see the submission at:"
        print
        print "        %s/review/%s" % (review_server, path)
        print
    else:
        print "ERROR: %s" % path
        sys.exit(1)

# ------------------------------------------------------------------------------
# Update Command
# ------------------------------------------------------------------------------

def update(argv=None, completer=None):

    op = OptionParser(usage="Usage: git review update", add_help_option=False)
    parse_options(op, argv, completer, False)
    parse_config(SCMConfig('git').root)

    for remote in ['upstream', 'gitreview']:
        setup_remote(remote)
        update_remote(remote)

# ------------------------------------------------------------------------------
# Help Strings
# ------------------------------------------------------------------------------

# These, along with other strings, should perhaps be internationalised at a
# later date.
apply.help = "fetch and apply a review changeset"
check.help = "run the automated review checks for this repository"
submit.help = "submit the current branch for review"
update.help = "add the upstream/gitserver remotes and update them"

# ------------------------------------------------------------------------------
# Command Mapping
# ------------------------------------------------------------------------------

COMMANDS = {
    'apply': apply,
    'check': check,
    'submit': submit,
    'update': update
    }

# ------------------------------------------------------------------------------
# Command Autocompletion
# ------------------------------------------------------------------------------

AUTOCOMPLETE_COMMANDS = COMMANDS.copy()

AUTOCOMPLETE_COMMANDS['help'] = lambda completer: (
    OptionParser(add_help_option=False),
    ListCompleter(COMMANDS.keys())
    )

AUTOCOMPLETE_COMMANDS['version'] = lambda completer: (
    OptionParser(add_help_option=False),
    ListCompleter([])
    )

for command in AUTOCOMPLETE_COMMANDS.values():
    command.autocomplete = make_autocompleter(command)

# ------------------------------------------------------------------------------
# Self Runner
# ------------------------------------------------------------------------------

if __name__ == '__main__':
    main()
